"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const TestServer_1 = require("../TestServer");
const decorators_1 = require("../decorators");
const JSONError_1 = require("./JSONError");
const superagent = require("superagent");
describe('JSONError', function () {
    let SampleService = class SampleService {
        shouldReturnJSON(request) {
            throw new JSONError_1.JSONError({
                title: 'Oh No'
            });
        }
        shouldThrowBubbledException() {
            throw new Error('Internal Server Error');
        }
    };
    __decorate([
        decorators_1.Get('/a'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], SampleService.prototype, "shouldReturnJSON", null);
    __decorate([
        decorators_1.Get('/b'),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], SampleService.prototype, "shouldThrowBubbledException", null);
    SampleService = __decorate([
        decorators_1.ServiceName('sample'),
        decorators_1.BaseRoute('/sample')
    ], SampleService);
    let server;
    before(() => __awaiter(this, void 0, void 0, function* () {
        server = new TestServer_1.TestServer();
        server.addService(new SampleService(), {});
        yield server.start();
    }));
    after(() => __awaiter(this, void 0, void 0, function* () {
        yield server.shutdown();
    }));
    it('should be able to serialize a JSONError as a 400 bad request', () => __awaiter(this, void 0, void 0, function* () {
        const err = yield chai_1.assert.isRejected(superagent.get(`${server.url}/sample/a`), "Bad Request");
        chai_1.assert.equal(err.response.status, 400);
        chai_1.assert.equal(err.response.body.status, 400);
        chai_1.assert.equal(err.response.body.title, "Oh No");
    }));
    it('should throw an internal server error', () => __awaiter(this, void 0, void 0, function* () {
        const err = yield chai_1.assert.isRejected(superagent.get(`${server.url}/sample/b`), "Internal Server Error");
        chai_1.assert.equal(err.response.status, 500);
        chai_1.assert.equal(err.response.body.status, 500);
        chai_1.assert.equal(err.response.body.title, "Internal Server Error");
    }));
});
//# sourceMappingURL=JSONError.spec.js.map