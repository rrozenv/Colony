"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const problems = require("./RealmProblem");
describe("RealmProblems", () => {
    describe("ServerMisconfiguration", () => {
        it("should have certain attributes", () => {
            const problem = new problems.ServerMisconfiguration();
            chai_1.assert.equal(problem.code, 801);
        });
    });
    describe("InvalidParameters", () => {
        it("should have certain attributes", () => {
            const problem = new problems.InvalidParameters();
            chai_1.assert.equal(problem.code, 601);
        });
        it("should accept a parameter list as an array of strings", () => {
            const problem = new problems.InvalidParameters('param1');
            chai_1.assert.equal(problem.code, 601);
            chai_1.assert.equal(problem.message, "Your request parameters did not validate. 'param1': Invalid parameter 'param1'!");
            chai_1.assert.deepEqual(problem.invalidParams, [{
                    name: "param1",
                    reason: "Invalid parameter \'param1\'!",
                }]);
        });
        it("should accept a parameter list as an array of objects", () => {
            const problem = new problems.InvalidParameters({ name: 'param1', reason: "some bogus reason" });
            chai_1.assert.equal(problem.code, 601);
            chai_1.assert.equal(problem.message, "Your request parameters did not validate. 'param1': some bogus reason");
            chai_1.assert.deepEqual(problem.invalidParams, [{
                    name: "param1",
                    reason: "some bogus reason",
                }]);
            chai_1.assert.includeDeepMembers(problem.toJSON().invalid_params, [{
                    name: "param1",
                    reason: "some bogus reason",
                }]);
        });
    });
    describe("MissingParameters", () => {
        it("should have certain attributes", () => {
            const problem = new problems.MissingParameters();
            chai_1.assert.equal(problem.code, 602);
        });
        it("should accept a parameter list as an array of strings", () => {
            const problem = new problems.MissingParameters('param1');
            chai_1.assert.equal(problem.code, 602);
            chai_1.assert.equal(problem.message, "Your request did not validate because of missing parameters. 'param1': Missing parameter 'param1'!");
        });
    });
    describe("InvalidCredentials", () => {
        it("should have certain attributes", () => {
            const problem = new problems.InvalidCredentials();
            chai_1.assert.equal(problem.code, 611);
        });
    });
    describe("UnknownAccount", () => {
        it("should have certain attributes", () => {
            const problem = new problems.UnknownAccount();
            chai_1.assert.equal(problem.code, 612);
        });
    });
    describe("ExistingAccount", () => {
        it("should have certain attributes", () => {
            const problem = new problems.ExistingAccount();
            chai_1.assert.equal(problem.code, 613);
        });
    });
    describe("AccessDenied", () => {
        it("should have certain attributes", () => {
            const problem = new problems.AccessDenied();
            chai_1.assert.equal(problem.code, 614);
        });
    });
    describe("ExpiredRefreshToken", () => {
        it("should have certain attributes", () => {
            const problem = new problems.ExpiredRefreshToken();
            chai_1.assert.equal(problem.code, 615);
        });
    });
    describe("InvalidHost", () => {
        it("should have certain attributes", () => {
            const problem = new problems.InvalidHost();
            chai_1.assert.equal(problem.code, 616);
        });
    });
    describe("RealmNotFound", () => {
        it("should have certain attributes", () => {
            const problem = new problems.RealmNotFound();
            chai_1.assert.equal(problem.code, 617);
        });
    });
    describe("UnknownUser", () => {
        it("should have certain attributes", () => {
            const problem = new problems.UnknownUser();
            chai_1.assert.equal(problem.code, 618);
        });
    });
    describe("ExpiredPermissionOffer", () => {
        it("should have certain attributes", () => {
            const problem = new problems.ExpiredPermissionOffer();
            chai_1.assert.equal(problem.code, 701);
        });
    });
    describe("AmbiguousPermissionOfferToken", () => {
        it("should have certain attributes", () => {
            const problem = new problems.AmbiguousPermissionOfferToken();
            chai_1.assert.equal(problem.code, 702);
        });
    });
    describe("FileMayNotBeShared", () => {
        it("should have certain attributes", () => {
            const problem = new problems.FileMayNotBeShared();
            chai_1.assert.equal(problem.code, 703);
        });
    });
});
//# sourceMappingURL=RealmProblem.spec.js.map