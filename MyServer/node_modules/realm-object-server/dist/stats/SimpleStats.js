"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class SimpleStatsCounter {
    constructor(params) {
        this.values = [];
        this.name = params.name;
        this.help = params.help;
    }
    inc(labels, value) {
        this.getValue(labels).value += (value === undefined ? 1 : value);
    }
    reset(labels, value) {
        this.getValue(labels).value = 0;
    }
    getValuesWithLabelNames(labelNames) {
        let values = this.values.filter((v) => {
            for (const k of labelNames) {
                if (v.labels[k] === undefined) {
                    return false;
                }
            }
            return true;
        });
        return values.map(v => v.value);
    }
    getValues(labels) {
        let values = this.values.filter((v) => {
            const findKeys = Object.keys(labels);
            for (const k in findKeys) {
                if (v.labels[k] !== labels[k]) {
                    return false;
                }
            }
            return true;
        });
        return values.map(v => v.value);
    }
    getValue(labels) {
        let value = this.values.find((v) => {
            const findKeys = Object.keys(labels);
            for (const k in findKeys) {
                if (v.labels[k] !== labels[k]) {
                    return false;
                }
            }
            return true;
        });
        if (!value) {
            value = { labels, value: 0 };
            this.values.push(value);
        }
        return value;
    }
}
exports.SimpleStatsCounter = SimpleStatsCounter;
class SimpleStatsGauge extends SimpleStatsCounter {
    dec(labels, value) {
        this.getValue(labels).value -= (value === undefined ? 1 : value);
    }
    set(labels, value) {
        this.getValue(labels).value = value;
    }
}
exports.SimpleStatsGauge = SimpleStatsGauge;
class SimpleStats {
    constructor() {
        this.metrics = {};
    }
    counter(params) {
        const counter = new SimpleStatsCounter(params);
        this.metrics[params.name] = counter;
        return counter;
    }
    gauge(params) {
        const gauge = new SimpleStatsGauge(params);
        this.metrics[params.name] = gauge;
        return gauge;
    }
    getValues(name, labels) {
        return __awaiter(this, void 0, void 0, function* () {
            const metric = this.metrics[name];
            if (metric) {
                return metric.getValues(labels);
            }
        });
    }
    getValuesWithLabelNames(name, labelNames) {
        return __awaiter(this, void 0, void 0, function* () {
            const metric = this.metrics[name];
            if (metric) {
                return metric.getValuesWithLabelNames(labelNames);
            }
        });
    }
}
exports.SimpleStats = SimpleStats;
//# sourceMappingURL=SimpleStats.js.map