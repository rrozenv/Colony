"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs = require("fs-extra");
const colors = require("colors");
const child_process_1 = require("child_process");
const Spinner = require('cli-spinner').Spinner;
function runScript(script, cwd) {
    return __awaiter(this, void 0, void 0, function* () {
        yield new Promise((resolve, reject) => {
            const child = child_process_1.exec(script, { cwd: cwd });
            let stderr = '';
            child.stderr.on('data', (data) => {
                stderr = data.toString();
            });
            child.once('exit', (code) => {
                child.stdout.removeAllListeners();
                child.stderr.removeAllListeners();
                if (code !== 0) {
                    reject(stderr);
                }
                else {
                    resolve();
                }
            });
        });
    });
}
function initProject(projectName, templateType = 'ts') {
    return __awaiter(this, void 0, void 0, function* () {
        const parsed = path.parse(projectName);
        const name = parsed.name;
        let pathToProject = path.join(process.cwd(), parsed.name);
        if (yield fs.pathExists(pathToProject)) {
            console.error(colors.red(`Oh no! The directory ${pathToProject} already exists.`));
            process.exit(0);
            return;
        }
        console.log(colors.green(`Creating '${name}'.`));
        let templateProjectDir = path.join(__dirname, '../templates/js/');
        if (templateType === 'ts') {
            templateProjectDir = path.join(__dirname, '../templates/ts/');
        }
        {
            const spinner = new Spinner(`Generating your project in ${pathToProject}`);
            spinner.setSpinnerString(9);
            spinner.start();
            yield fs.mkdirp(pathToProject);
            yield fs.copy(templateProjectDir, pathToProject, { recursive: true });
            spinner.stop(false);
        }
        {
            const spinner = new Spinner(`Installing dependencies... A little patience is good.`);
            spinner.setSpinnerString(12);
            spinner.start();
            let installScript = `npm install --save-exact realm-object-server`;
            let generalInstall = `npm install`;
            yield runScript(installScript, pathToProject);
            yield runScript(generalInstall, pathToProject);
            spinner.stop(false);
        }
        console.log(colors.green(`\nCongrats! Now cd into '${name}' and run 'npm start'.`));
    });
}
exports.initProject = initProject;
//# sourceMappingURL=project.js.map