import * as Realm from "realm";
import { Discovery } from "./discovery";
import { Logger } from "./shared/Logger";
export interface RealmDefinition {
    remotePath: string;
    localPath?: string;
    syncLabel?: string;
    schema: any[];
}
export declare function createRealmSchema(klass: any): any;
export declare class RealmPromise extends Promise<Realm> {
    openCount: number;
    constructor(executor: (resolve: (value?: Realm | PromiseLike<Realm>) => void, reject: (reason?: any) => void) => void);
}
export interface RealmFactoryParams {
    discovery: Discovery;
    dataPath: string;
    adminToken: string;
    logger: Logger;
}
export declare class RealmFactory {
    private syncedRealmPromises;
    private discovery;
    private adminToken;
    private dataPath;
    private logger;
    constructor(params: RealmFactoryParams);
    open(definition: RealmDefinition): Promise<Realm>;
    close(): Promise<void>;
}
