export declare type HTTPMethod = 'all' | 'get' | 'put' | 'post' | 'delete' | 'head' | 'options' | 'trace' | 'patch';
export interface Route {
    httpMethod: HTTPMethod;
    path: string;
    functionName: string;
}
export interface ServeStaticRoute {
    path: string;
    staticRoot: string;
}
export interface ParameterArguments {
    functionName: string;
    argumentIndex: number;
    type: 'body' | 'query' | 'params' | 'request' | 'response' | 'next' | 'headers' | 'socket' | 'headBuffer';
    keyPath?: string | string[];
}
export interface UpgradeRoute {
    functionName: string;
    path: string;
}
export declare function Get(path: string): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function Post(path: string): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function Put(path: string): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function Delete(path: string): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function Options(path: string): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function Head(path: string): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function Trace(path: string): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function Patch(path: string): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function All(path: string): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function Upgrade(path: string): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function MiddlewaresBefore(...middlewares: any[]): (target: any, propertyKey?: string, descriptor?: PropertyDescriptor) => void;
export declare function BaseRoute(path: string): (target: any) => void;
export declare function ServiceName(name: string): (target: any) => void;
export declare function Tags(tags: string[]): (target: any) => void;
export declare function ServeStatic(route: string, staticRoot: string): (target: any) => any;
export declare function Body(keyPath?: string): (target: any, functionName: string, argumentIndex: number) => void;
export declare function Headers(keyPath?: string | string): (target: any, functionName: string, argumentIndex: number) => void;
export declare function Params(keyPath?: string | string[]): (target: any, functionName: string, argumentIndex: number) => void;
export declare function Query(keyPath?: string): (target: any, functionName: string, argumentIndex: number) => void;
export declare function Request(): (target: any, functionName: string, argumentIndex: number) => void;
export declare function Response(): (target: any, functionName: string, argumentIndex: number) => void;
export declare function Socket(): (target: any, functionName: string, argumentIndex: number) => void;
export declare function HeadBuffer(): (target: any, functionName: string, argumentIndex: number) => void;
export declare function Next(): (target: any, functionName: string, argumentIndex: number) => void;
export declare function Start(): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function Stop(): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function ServerStarted(): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function Address(): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
export declare function Unmute(contextual?: boolean): (target: any, propertyKey: string, descriptor: PropertyDescriptor) => void;
