"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RealmFactory_1 = require("../RealmFactory");
class UserMetadataRow {
    toJSON() {
        return {
            key: this.key,
            value: this.value,
        };
    }
}
UserMetadataRow.schema = {
    name: 'UserMetadataRow',
    properties: {
        user: { type: 'linkingObjects', objectType: 'User', property: 'metadata' },
        key: { type: 'string', optional: false },
        value: { type: 'string', optional: false }
    }
};
exports.UserMetadataRow = UserMetadataRow;
class User {
    constructor() {
        this.created = false;
    }
    toJSON() {
        return {
            user_id: this.userId,
            is_admin: this.isAdmin,
            accounts: this.accounts.slice().map((a) => a.toJSON()),
            metadata: this.metadata.slice().map((m) => m.toJSON()),
        };
    }
}
User.schema = {
    name: 'User',
    primaryKey: 'userId',
    properties: {
        userId: { type: 'string', optional: false },
        isAdmin: { type: 'bool', optional: false },
        accounts: { type: "list", objectType: "Account" },
        metadata: { type: 'list', objectType: 'UserMetadataRow', default: [], optional: false }
    }
};
exports.User = User;
class Account {
    toJSON() {
        return {
            provider: this.provider,
            provider_id: this.providerId,
        };
    }
}
Account.schema = {
    name: 'Account',
    properties: {
        provider: { type: 'string', optional: false, indexed: true },
        providerId: { type: "string", optional: false, indexed: true },
        user: { type: 'linkingObjects', objectType: 'User', property: 'accounts' }
    }
};
exports.Account = Account;
class UniquePermission {
}
UniquePermission.schema = {
    name: 'Permission',
    primaryKey: 'userPath',
    properties: {
        userPath: { type: 'string', indexed: true },
        userId: { type: 'string', indexed: true },
        path: { type: 'string', indexed: true },
        mayRead: { type: 'bool', optional: false },
        mayWrite: { type: 'bool', optional: false },
        mayManage: { type: 'bool', optional: false },
        updatedAt: { type: 'date', optional: false },
    }
};
exports.UniquePermission = UniquePermission;
class Permission {
}
Permission.schema = {
    name: 'Permission',
    properties: {
        user: { type: 'User' },
        realmFile: 'RealmFile',
        mayRead: { type: 'bool', optional: false },
        mayWrite: { type: 'bool', optional: false },
        mayManage: { type: 'bool', optional: false },
        updatedAt: { type: 'date', optional: false },
    }
};
exports.Permission = Permission;
class RealmFile {
}
RealmFile.schema = {
    name: 'RealmFile',
    primaryKey: 'path',
    properties: {
        path: 'string',
        syncLabel: 'string',
        owner: { type: 'User', optional: true },
        createdAt: { type: 'date', optional: false },
        permissions: { type: 'linkingObjects', objectType: 'Permission', property: 'realmFile' }
    }
};
exports.RealmFile = RealmFile;
exports.AdminRealm = {
    remotePath: "/__admin",
    localPath: "realms/__admin.realm",
    syncLabel: 'default',
    schema: [
        RealmFactory_1.createRealmSchema(User),
        RealmFactory_1.createRealmSchema(UserMetadataRow),
        RealmFactory_1.createRealmSchema(Account),
        RealmFactory_1.createRealmSchema(Permission),
        RealmFactory_1.createRealmSchema(RealmFile),
    ],
};
//# sourceMappingURL=AdminRealm.js.map