"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const chai = require("chai");
chai.use(require("chai-as-promised"));
const path = require("path");
const __1 = require("..");
const TestServer_1 = require("../TestServer");
describe("CloudkitAuthProvider Realm-JS Integration Tests", () => {
    let provider;
    let server;
    let authService;
    function createServer(params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            server = new TestServer_1.TestServer();
            provider = new __1.auth.CloudkitAuthProvider({
                container: "iCloud.io.realm.realmtasks-cloudkit.ios",
                keyId: "94938c4a9cf6770491bafea8dcf252f9712b748479d8ad6c84344186746accfb",
                privateKeyPath: path.join(__dirname, "..", "..", "fixtures", "cloudkit_eckey.pem"),
                environment: "development"
            });
            yield server.start({
                authProviders: [provider],
            });
            authService = server.getService('auth');
        });
    }
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        if (server) {
            yield server.shutdown();
        }
    }));
    beforeEach(() => __awaiter(this, void 0, void 0, function* () { return createServer(); }));
    describe("with a valid providerToken", () => {
        it('should be able to login to realm-js', function () {
            return __awaiter(this, void 0, void 0, function* () {
                const registeredUser = yield Realm.Sync.User.registerWithProvider(server.url, {
                    provider: 'cloudkit',
                    providerToken: '_7787dee12e9219d480f3ada50e7dcd6c',
                    userInfo: ''
                });
                yield chai_1.assert.isDefined(registeredUser.identity);
            });
        });
    });
    describe("with an invalid providerToken", () => {
        it('should be able to login to realm-js', function () {
            return __awaiter(this, void 0, void 0, function* () {
                yield chai_1.assert.isRejected(Realm.Sync.User.registerWithProvider(server.url, {
                    provider: 'cloudkit',
                    providerToken: 'invalidtoken',
                    userInfo: ''
                }), "The provided credentials are invalid or the user does not exist.");
            });
        });
    });
});
//# sourceMappingURL=cloudkit-auth-provider.spec.js.map