"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const TestServer_1 = require("../TestServer");
describe('Server Open Realm Tests', function () {
    let server;
    beforeEach(() => __awaiter(this, void 0, void 0, function* () {
        server = new TestServer_1.TestServer();
        yield server.start();
    }));
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        if (server) {
            yield server.shutdown();
        }
    }));
    it('should be able to open a realm', () => __awaiter(this, void 0, void 0, function* () {
        const realm = yield server.openRealm('/__admin');
        chai_1.expect(realm.schema).to.not.be.empty;
    }));
    it('should be able to open a realm with admin is true', () => __awaiter(this, void 0, void 0, function* () {
        const realm = yield server.openRealm('/__admin');
        chai_1.expect(realm.syncSession.user.isAdmin).to.be.true;
    }));
});
//# sourceMappingURL=server-open-realm-tests.spec.js.map