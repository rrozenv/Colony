"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const TestServer_1 = require("../TestServer");
const Token_1 = require("../shared/Token");
const fs = require("fs-extra");
const path = require("path");
describe('Server Default Autokey Generated', function () {
    const ProductSchema = {
        name: 'Product',
        primaryKey: 'productId',
        properties: {
            productId: { type: 'int', optional: false },
            name: { type: 'string', optional: false },
            price: { type: 'float', optional: false }
        }
    };
    let server;
    let privateKeyPath;
    let publicKeyPath;
    before(() => __awaiter(this, void 0, void 0, function* () {
        server = new TestServer_1.TestServer();
        yield server.start({
            autoKeyGen: true,
            publicKeyPath: null,
            privateKeyPath: null
        });
        publicKeyPath = path.join(server.dataPath, "keys/auth.pub");
        privateKeyPath = path.join(server.dataPath, "keys/auth.key");
    }));
    after(() => __awaiter(this, void 0, void 0, function* () {
        if (server) {
            yield server.shutdown();
        }
    }));
    it('should create keys at the default location', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const publicKeyExists = yield fs.pathExists(publicKeyPath);
            const privateKeyExists = yield fs.pathExists(privateKeyPath);
            chai_1.expect(publicKeyExists).to.be.true;
            chai_1.expect(privateKeyExists).to.be.true;
        });
    });
    it('should create admin.json at the default location', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const adminJsonExists = yield fs.pathExists(path.resolve(server.dataPath, "keys/admin.json"));
            chai_1.expect(adminJsonExists).to.be.true;
        });
    });
    it('should be able to create an admin token user ', function () {
        return __awaiter(this, void 0, void 0, function* () {
            const fileAsString = yield fs.readFile(path.resolve(server.dataPath, "keys/admin.json"), 'utf8');
            const json = JSON.parse(fileAsString);
            const adminToken = json["ADMIN_TOKEN"];
            chai_1.expect(adminToken).to.not.be.undefined;
            const user = Realm.Sync.User.adminUser(adminToken, "some url");
            const parsedToken = Token_1.Token.parse(user.token, server.publicKey);
            chai_1.expect(parsedToken.identity).to.eq('__admin');
        });
    });
});
//# sourceMappingURL=server-autokeygen-tests.spec.js.map