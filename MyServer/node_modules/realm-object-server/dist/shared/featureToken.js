"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jwt = require("jsonwebtoken");
const rosFeatureToken = "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJTeW5jIjp0cnVlLCJpYXQiOjE0OTI2MTEzMjl9.ixnaKuxOc3AUF0-h4g5Xy9OXIg1caEEdjjehz-2kweVZcBZvmmZ59oCsdJsDCemzQnGDqcfGLDsLa5S3RseNFUeYBsDHzdg3wyYRvKuEb9Va1qwjtfIearnU0n8-X5c_M8gUjmv6f22SLVjHptRFxudRmm5ej4AP1v2eyU_hCkQgTAk9twva4xDrdJX9VKGeA2QWwetbk2BnTIuW_rzJcTAD5eAw3fyKQXbxvEte7RqStYcP7gS02uiLxWJeZ_liIoO-SOq-ySwInb8NlhMJN8jWHp-cDoRGVHwTIhyK6IkKWkkymnhDAV4BitYbaK1pY05-5IOF4v8OXXVRmZav4A";
function loadFeatureToken(token) {
    const featureToken = token || rosFeatureToken;
    const decoded = jwt.decode(featureToken);
    if (decoded) {
        const expires = new Date(decoded.iat * 1000);
        const capabilities = Object.keys(decoded).filter(k => decoded[k] === true);
        Realm.Sync.setFeatureToken(featureToken);
        return { capabilities, expires };
    }
    else {
        throw new Error("Could not decode feature token.");
    }
}
exports.loadFeatureToken = loadFeatureToken;
//# sourceMappingURL=featureToken.js.map