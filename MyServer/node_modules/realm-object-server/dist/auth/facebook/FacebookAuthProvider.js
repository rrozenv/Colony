"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const AuthProvider_1 = require("../AuthProvider");
const errors = require("../../errors");
const superagent = require("superagent");
class FacebookAuthProvider extends AuthProvider_1.AuthProvider {
    constructor() {
        super(...arguments);
        this.name = 'facebook';
    }
    authenticateOrCreateUser(body) {
        return __awaiter(this, void 0, void 0, function* () {
            const accessToken = body.data;
            if (accessToken === undefined) {
                throw new errors.realm.MissingParameters('access token');
            }
            return superagent
                .get(`https://graph.facebook.com/me?access_token=${encodeURIComponent(accessToken)}`)
                .set('Accept', 'application/json')
                .then((response) => {
                let graphObject = response.body;
                if (graphObject.id === undefined) {
                    throw new Error('No id and no error on graphObject.');
                }
                const userId = graphObject.id;
                const foundUser = this.service.getUserByProviderId("facebook", userId);
                if (foundUser) {
                    return foundUser;
                }
                return this.service.createOrUpdateUser(userId, "facebook", false, null);
            })
                .catch((error) => {
                throw new errors.realm.InvalidCredentials({
                    detail: error.toString()
                });
            });
        });
    }
}
exports.FacebookAuthProvider = FacebookAuthProvider;
//# sourceMappingURL=FacebookAuthProvider.js.map