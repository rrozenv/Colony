"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const AuthProvider_1 = require("../AuthProvider");
const errors = require("../../errors");
const superagent = require("superagent");
const jwt = require("jsonwebtoken");
class AzureAuthProvider extends AuthProvider_1.AuthProvider {
    constructor(config) {
        super();
        this.name = 'azuread';
        this.tenantId = config.tenant_id;
        this.skipVerification = config.skipVerification;
    }
    authenticateOrCreateUser(body) {
        return __awaiter(this, void 0, void 0, function* () {
            const accessToken = body.data;
            if (accessToken === undefined) {
                throw new errors.realm.MissingParameters('access token');
            }
            const issuer = `https://sts.windows.net/${this.tenantId}/`;
            const decoded = jwt.decode(accessToken, { complete: true });
            if (!decoded || !decoded.payload || !decoded.header) {
                throw new errors.realm.InvalidCredentials({
                    detail: "The access token is not a valid signed JWT.",
                });
            }
            if (decoded.payload.tid !== this.tenantId) {
                throw new errors.realm.InvalidCredentials({
                    detail: `Invalid tenant Id. Expected: ${this.tenantId}`,
                });
            }
            if (issuer !== decoded.payload.iss) {
                throw new errors.realm.InvalidCredentials({
                    detail: `Invalid issuer. Expected: ${issuer}`,
                });
            }
            return this.httpGet(`${issuer}.well-known/openid-configuration`)
                .then((response) => {
                let configuration = response.body;
                return this.httpGet(configuration.jwks_uri);
            })
                .then((response) => {
                let keyConfiguration = response.body;
                if (!this.skipVerification) {
                    this.validateSignature(accessToken, keyConfiguration.keys, decoded.header.kid);
                }
                const userId = decoded.payload.unique_name;
                const foundUser = this.service.getUserByProviderId("azuread", userId);
                if (foundUser) {
                    return foundUser;
                }
                return this.service.createOrUpdateUser(userId, "azuread", false, null);
            });
        });
    }
    httpGet(uri) {
        return superagent
            .get(uri)
            .set('Accept', 'application/json')
            .catch((err) => {
            throw new errors.JSONError({
                title: "Bad Gateway",
                detail: err.toString(),
                status: 502
            });
        });
    }
    validateSignature(accessToken, keys, kid) {
        for (const key of keys) {
            if (key.kid === kid) {
                const certificate = `-----BEGIN CERTIFICATE-----\n${key.x5c[0]}\n-----END CERTIFICATE-----`;
                try {
                    jwt.verify(accessToken, certificate);
                    return;
                }
                catch (err) {
                    throw new errors.realm.InvalidCredentials({
                        detail: err.message,
                    });
                }
            }
        }
        throw new errors.realm.InvalidCredentials({
            detail: 'Unable to find jwt public key.',
        });
    }
}
exports.AzureAuthProvider = AzureAuthProvider;
//# sourceMappingURL=AzureAuthProvider.js.map