"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const __1 = require("..");
const path = require("path");
const Realm = require("realm");
const TickerSchema = {
    name: 'Ticker',
    properties: {
        'tickerSymbol': { type: 'string', optional: false, default: '' },
        'price': { type: 'float', optional: false, default: 0 },
        'companyName': { type: 'string', optional: false, default: '' }
    }
};
let server;
function main() {
    return __awaiter(this, void 0, void 0, function* () {
        server = new __1.BasicServer();
        yield server.start({
            dataPath: path.resolve('./data'),
            logLevel: 'debug',
        });
        const adminTokenUser = require(path.resolve(server.dataPath, 'keys/admin.json')).ADMIN_TOKEN;
        const adminUser = Realm.Sync.User.adminUser(adminTokenUser, `http://127.0.0.1:9080`);
        const realm = new Realm({
            sync: {
                user: adminUser,
                url: `realm://127.0.0.1:9080/tickers`
            },
            schema: [TickerSchema]
        });
        realm.write(() => {
            realm.create('Ticker', {
                tickerSymbol: 'RLM',
                price: 75.64,
                companyName: 'Realm'
            });
        });
    });
}
main();
//# sourceMappingURL=app.js.map