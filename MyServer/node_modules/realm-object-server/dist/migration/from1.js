#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const RealmOne = require("realm-one");
const path = require("path");
const fs = require("fs");
const virtPath_1 = require("../shared/virtPath");
function Promisify(callback, ...args) {
    return new Promise((resolve, reject) => {
        callback(...args, (err, result) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(result);
            }
        });
    });
}
class JsonWriteStream {
    constructor(path) {
        this.path = path;
        this.stream = fs.createWriteStream(path);
    }
    putCommaIfNeeded() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.needComma) {
                yield this.write(',');
                this.needComma = false;
            }
        });
    }
    key(name) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.putCommaIfNeeded();
            yield this.write(JSON.stringify(name) + ":");
        });
    }
    value(data) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.putCommaIfNeeded();
            yield this.write(JSON.stringify(data));
            this.needComma = true;
        });
    }
    pair(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.key(key);
            yield this.value(value);
        });
    }
    pairs(o) {
        return __awaiter(this, void 0, void 0, function* () {
            for (const key in o) {
                yield this.pair(key, o[key]);
            }
        });
    }
    open(bracket) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.putCommaIfNeeded();
            yield this.write(bracket);
        });
    }
    close(bracket) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.write(bracket);
            this.needComma = true;
        });
    }
    write(data) {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promisify(this.stream.write.bind(this.stream), data);
        });
    }
    end(data) {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promisify(this.stream.end.bind(this.stream), data);
        });
    }
}
function isSpecialRealm(path) {
    if (path === "/__admin")
        return true;
    if (path.endsWith("/__permission"))
        return true;
    if (path.endsWith("/__management"))
        return true;
    return false;
}
function exportRealms(stream, realm) {
    return __awaiter(this, void 0, void 0, function* () {
        yield stream.key("realms");
        yield stream.open("[");
        const objects = realm.objects("RealmFile");
        let count = 0;
        for (const obj of objects) {
            const file = obj;
            if (isSpecialRealm(file.path))
                continue;
            if (!virtPath_1.mapVirtToRealmPath("/", file.path)) {
                console.log(`skipping a realm with invalid path: ${file.path}`);
            }
            yield stream.value({
                id: file.id,
                owner_id: file.owner ? file.owner.id : null,
                cluster_node_id: file.cluster_node ? file.cluster_node.id : null,
                path: file.path,
            });
            count++;
        }
        yield stream.close("]");
        return count;
    });
}
function exportUserMetadata(stream, realm, user) {
    return __awaiter(this, void 0, void 0, function* () {
        const objects = realm.objects("Metadata").filtered("userId == $0", user.id);
        const metadata = {};
        for (const obj of objects) {
            const datum = obj;
            if (!metadata[datum.namespace]) {
                metadata[datum.namespace] = {};
            }
            metadata[datum.namespace][datum.key] = datum.value;
        }
        yield stream.pair("metadata", metadata);
    });
}
function exportUserAccounts(stream, user) {
    return __awaiter(this, void 0, void 0, function* () {
        yield stream.key("accounts");
        yield stream.open("[");
        for (const accobj of user.accounts) {
            const account = accobj;
            yield stream.value({
                data: account.data,
                provider: account.provider,
                provider_id: account.provider_id,
            });
        }
        yield stream.close("]");
    });
}
function exportUser(stream, realm, user) {
    return __awaiter(this, void 0, void 0, function* () {
        yield stream.open("{");
        yield stream.pairs({
            id: user.id,
            is_admin: user.isAdmin,
        });
        yield exportUserAccounts(stream, user);
        yield exportUserMetadata(stream, realm, user);
        yield stream.close("}");
    });
}
function exportUsers(stream, realm) {
    return __awaiter(this, void 0, void 0, function* () {
        yield stream.key("users");
        yield stream.open("[");
        let count = 0;
        for (const u of realm.objects("User").filtered("id != '__auth'")) {
            yield exportUser(stream, realm, u);
            count++;
        }
        yield stream.close("]");
        return count;
    });
}
function exportPermission(stream, p) {
    return __awaiter(this, void 0, void 0, function* () {
        yield stream.value({
            file_path: p.file.path,
            user_id: p.user ? p.user.id : null,
            file_id: p.file.id,
            may_read: p.mayRead,
            may_write: p.mayWrite,
            may_manage: p.mayManage,
        });
    });
}
function exportPermissions(stream, realm) {
    return __awaiter(this, void 0, void 0, function* () {
        yield stream.key("permissions");
        yield stream.open("[");
        let count = 0;
        for (const p of realm.objects("Permission")) {
            if (isSpecialRealm(p.file.path))
                continue;
            yield exportPermission(stream, p);
            count++;
        }
        yield stream.close("]");
        return count;
    });
}
function exportAdminRealm(src, dst) {
    return __awaiter(this, void 0, void 0, function* () {
        const realm = new RealmOne({
            path: src,
            readOnly: true,
        });
        const stream = new JsonWriteStream(dst);
        yield stream.open("{");
        const users = yield exportUsers(stream, realm);
        const realms = yield exportRealms(stream, realm);
        const permissions = yield exportPermissions(stream, realm);
        yield stream.close("}");
        yield stream.end();
        realm.close();
        return { users, realms, permissions };
    });
}
function isSubset(a, b) {
    return !a.some(e => b.indexOf(e) === -1);
}
function isRoot(path) {
    let contents;
    try {
        contents = fs.readdirSync(path);
    }
    catch (_a) {
        return false;
    }
    if (!isSubset(['0', 'internal_data', 'user_data'], contents)) {
        return false;
    }
    return true;
}
function getChildren(curpath) {
    try {
        const names = fs.readdirSync(curpath);
        return names.map((name) => path.resolve(curpath, name));
    }
    catch (_a) {
        return [];
    }
}
function scanIn(curpath, depth = 3) {
    const result = [];
    if (depth < 1) {
        return result;
    }
    for (const subpath of getChildren(curpath)) {
        result.push(subpath);
        result.push.apply(result, scanIn(subpath, depth - 1));
    }
    return result;
}
function scanOut(curpath, depth = 3) {
    const result = [];
    if (depth < 1) {
        return result;
    }
    for (const subpath of getChildren(curpath)) {
        result.push(subpath);
    }
    result.push.apply(result, scanOut(path.resolve(curpath, '..'), depth - 1));
    return result;
}
function isIn(value, list) {
    return list.some((e) => e === value);
}
function findRootsInList(paths) {
    const candidates = {};
    const requiredChildren = ["0", "internal_data", "user_data"];
    for (const p of paths) {
        const { dir, base } = path.parse(p);
        if (isIn(base, requiredChildren)) {
            if (!candidates[dir]) {
                candidates[dir] = {};
            }
            candidates[dir][base] = true;
        }
    }
    const roots = [];
    for (const path of Object.keys(candidates)) {
        const candidate = candidates[path];
        if (isSubset(requiredChildren, Object.keys(candidate))) {
            roots.push(path);
        }
    }
    return roots;
}
function findRoots(startpath) {
    const list = [...scanIn(startpath), ...scanOut(startpath)];
    return findRootsInList(list);
}
function main(root) {
    return __awaiter(this, void 0, void 0, function* () {
        const absRoot = path.resolve(root);
        if (!isRoot(absRoot)) {
            console.error(`Not a Realm Object Server root directory: ${absRoot}`);
            const suggestions = findRoots(absRoot);
            if (suggestions.length > 0) {
                console.error('You probably mean one of these:');
                for (const suggestion of suggestions) {
                    console.error(`   ${suggestion}`);
                }
            }
            else {
                console.error('The root dir should contain `0/`, `internal_data/`, and `user_data/`.');
            }
            process.exit(1);
        }
        const adminRealmPath = path.join(root, "internal_data", "auth.realm");
        const adminJsonPath = path.join(root, "__admin.json");
        console.log(`will export ${adminRealmPath} -> ${adminJsonPath}`);
        const counts = yield exportAdminRealm(adminRealmPath, adminJsonPath);
        console.log(`exported users: ${counts.users}, realms: ${counts.realms}, permissions: ${counts.permissions}`);
        process.exit(0);
    });
}
if (process.argv.length !== 3) {
    console.error('specify one argument - the root directory of ROS-1.x');
    process.exit(1);
}
main(process.argv[2]);
//# sourceMappingURL=from1.js.map