import { Discovery } from '../discovery/Discovery';
import { Logger } from '../shared/Logger';
import { Server } from "../Server";
import { IAuthProvider } from "../auth";
import { User } from "../realms";
export interface RefreshTokenResponseJSON {
    refresh_token: {
        token: string;
        token_data: any;
    };
}
export interface RealmAccessTokenResponse {
    access_token: {
        token: string;
        token_data: any;
    };
}
export declare type AuthenticationResponseJSON = RealmAccessTokenResponse | RefreshTokenResponseJSON;
export interface AuthServiceConfiguration {
    refreshTokenTtl?: number;
    accessTokenTtl?: number;
}
export declare class AuthService {
    logger: Logger;
    privateKey: string;
    publicKey: string;
    adminToken: string;
    protected refreshTokenTtl: number;
    protected accessTokenTtl: number;
    constructor(config?: AuthServiceConfiguration);
    private adminRealm;
    private tokenRevocationRealm;
    discovery: Discovery;
    server: Server;
    providers: IAuthProvider[];
    addProvider(provider: IAuthProvider): void;
    protected cleanupInterval: number;
    start(server: Server): Promise<void>;
    stop(): Promise<void>;
    authenticate(request: any): Promise<AuthenticationResponseJSON>;
    accessToken(path: string, data: any, app_id?: string): Promise<RealmAccessTokenResponse>;
    revokeToken(tokenData: string, req?: any): Promise<{}>;
    getUserById(userId: string, req?: any): User;
    getUserByProviderId(provider: string, providerId: string, req?: any): User;
    createOrUpdateUser(providerId: string, provider: string, isAdmin: boolean, metadata?: {
        [key: string]: string;
    }, userId?: string, req?: any): Promise<User>;
    updateProviderData(providerName: string, userId: string, data: any, req?: any): Promise<{}>;
    deleteUser(userId: string, req: any): Promise<{}>;
    private pruneRevocationTokens();
    private generateUniqueId();
    private checkNotRevoked(token);
    private requireAdminOrUserId(req?, userId?);
    private findRealmByPathUrl(handle, path, token);
    private getSyncServerDeleteRealmUrl(realmPath, syncLabel);
    private deleteUserWithUserId(userId);
}
