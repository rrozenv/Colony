"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const sinon = require("sinon");
const chai = require("chai");
chai.use(require("chai-as-promised"));
const HealthService_1 = require("../services/HealthService");
describe('HealthService', () => {
    let service;
    let statusCode;
    let response;
    let json;
    let send;
    beforeEach(() => __awaiter(this, void 0, void 0, function* () {
        service = new HealthService_1.HealthService();
        statusCode = 0;
        send = sinon.stub();
        json = sinon.stub();
        response = {
            status: function (code) {
                statusCode = code;
                return { send, json };
            },
        };
    }));
    it("should return 503 initially", () => {
        service.getHealth(null, response);
        chai_1.assert.strictEqual(statusCode, 503);
    });
    it("should switch to 200 after the server starts", () => {
        service.live();
        service.getHealth(null, response);
        chai_1.assert.strictEqual(statusCode, 200);
    });
});
//# sourceMappingURL=HealthService.spec.js.map