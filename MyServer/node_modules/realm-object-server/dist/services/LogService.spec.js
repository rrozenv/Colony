"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Logger_1 = require("../shared/Logger");
const LogService_1 = require("./LogService");
class MockLogger extends Logger_1.Logger {
    constructor() {
        super();
    }
    log(level, msg, ctx) {
        this.emit('message', level, msg, ctx);
    }
}
describe('LogService', function () {
    let logger;
    let service;
    beforeEach(() => __awaiter(this, void 0, void 0, function* () {
        logger = new MockLogger();
        service = new LogService_1.LogService();
        service.setRootLogger(logger);
        yield service.start(null);
    }));
    afterEach(() => __awaiter(this, void 0, void 0, function* () {
        yield service.stop();
        logger.close();
    }));
    it.skip('saves messages to all buffers with suitable level', function () {
        return __awaiter(this, void 0, void 0, function* () {
            logger.trace('a trace message');
            logger.info('an info message');
            logger.error('an error message');
        });
    });
});
//# sourceMappingURL=LogService.spec.js.map