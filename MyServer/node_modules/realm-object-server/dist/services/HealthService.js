"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const decorators_1 = require("../decorators");
let HealthService = class HealthService {
    constructor() {
        this.started = false;
    }
    live() {
        this.started = true;
    }
    getHealth(request, res) {
        if (!this.started) {
            res.status(503).send("Server has not fully started yet");
            return;
        }
        res.status(200).json({});
    }
};
__decorate([
    decorators_1.ServerStarted(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], HealthService.prototype, "live", null);
__decorate([
    decorators_1.Get("/"),
    __param(1, decorators_1.Response()),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Object, Object]),
    __metadata("design:returntype", void 0)
], HealthService.prototype, "getHealth", null);
HealthService = __decorate([
    decorators_1.BaseRoute("/health")
], HealthService);
exports.HealthService = HealthService;
//# sourceMappingURL=HealthService.js.map