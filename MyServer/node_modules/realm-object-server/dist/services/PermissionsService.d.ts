/// <reference types="node" />
import { Server } from "../Server";
import { Permission, PermissionChange, PermissionOffer, PermissionOfferResponse, User, RealmFile } from '../realms';
import { EventEmitter } from 'events';
export interface IPermissionServiceEventEmitter {
    on(event: 'handlePermissionChange', listener: (changeEvent: Realm.Sync.ChangeEvent) => void): this;
    on(event: 'handleUserSpecificManagementChange', listener: (changeEvent: Realm.Sync.ChangeEvent) => void): this;
}
export declare class PermissionService extends EventEmitter implements IPermissionServiceEventEmitter {
    static MANAGEMENT_REALM_REGEX: string;
    static ADMIN_REALM_REGEX: string;
    private adminRealm;
    private legacyWildcardPermissionRealm;
    private wildcardPermissionRealm;
    private privateKey;
    private publicKey;
    private dataPath;
    private logger;
    private adminTokenUser;
    private server;
    private handleManagementChangeCallback;
    private handleAdminChangeCallback;
    start(server: Server): Promise<void>;
    private grantReadWriteOnLegacyUserPermissionRealms();
    stop(): void;
    onDemand(accessToken: string): Promise<{
        userId: string;
        affectedPermissionsCount: number;
    }>;
    unreflectPermissionIn(perm: Permission, mirror: Realm, legacy?: boolean): boolean;
    reflectPermissionIn(perm: Permission, mirror: Realm, legacy?: boolean): boolean;
    getUserByUserId(userId: string): User;
    getUserByProviderId(providerId: string, provider: string): User;
    getUserIdsWithMetadata(key: string, value: string): string[];
    getUsersByUserIds(userIds: string[]): Realm.Results<User>;
    getManagementRealmForUserId(userId: string): Promise<Realm>;
    grantReadOnlyAccessToWildcardPermissionRealm(): Promise<void>;
    applyPermissionChangeInAdminRealm(realmFilePath: string, userId?: string, mayRead?: boolean, mayWrite?: boolean, mayManage?: boolean): Promise<void>;
    getUserSpecificPermissionRealm(userId: string, legacy?: boolean): Promise<Realm>;
    private handleAdminRealmChange(changeEvent);
    private handleManagementRealmChange(changeEvent);
    handlePermissionOfferObject(permissionOffer: PermissionOffer, owner: User, realm: Realm): void;
    handlePermissionOfferResponseObject(permissionOfferResponse: PermissionOfferResponse, owner: User, realm: Realm): Promise<void>;
    handlePermissionChangeObject(permissionChange: PermissionChange, owner: User, realm: Realm): void;
    validateUserIdCanChangePermissionsForPath(owner: User, path: string): void;
    handleWildcardUserIdUrl(permissionChange: PermissionChange, path: string): void;
    handleWildcardRealmUrlForUser(permissionChange: PermissionChange, owner: User): void;
    handleWildcardRealmUrlForAllUsers(permissionChange: PermissionChange, owner: User): void;
    setPermissionChangesInAdminRealm(users: Realm.Results<User>, realmFiles: Realm.Results<RealmFile>, mayWrite: boolean, mayRead: boolean, mayManage: boolean, permissionChange?: PermissionChange): void;
}
