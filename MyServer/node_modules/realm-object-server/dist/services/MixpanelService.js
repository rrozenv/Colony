"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Server_1 = require("../Server");
const shared_1 = require("../shared");
const realms_1 = require("../realms");
const decorators_1 = require("../decorators");
const os = require("os");
class MixpanelService {
    constructor(config) {
        this.config = config;
    }
    start(server) {
        return __awaiter(this, void 0, void 0, function* () {
            this.adminRealm = yield server.realmFactory.open(realms_1.AdminRealm);
            this.timeout = setTimeout(() => {
                delete this.timeout;
                this.interval = setInterval(this.sendUsage.bind(this), 10 * 60 * 1000);
                this.sendUsage();
            }, 10 * 1000);
        });
    }
    stop() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.timeout) {
                clearTimeout(this.timeout);
                delete this.timeout;
            }
            if (this.interval) {
                clearInterval(this.interval);
                delete this.interval;
            }
            if (this.adminRealm) {
                this.adminRealm.close();
                delete this.adminRealm;
            }
        });
    }
    sendUsage() {
        return __awaiter(this, void 0, void 0, function* () {
            const activeSyncConnectionCounts = yield this.statsStorage.getValues("active_sync_connections", {});
            const activeUserCounts = yield this.statsStorage.getValuesWithLabelNames("active_sync_connections", ["identity"]);
            const payload = {
                active_connections: activeSyncConnectionCounts.reduce((a, b) => a + b, 0),
                active_users: activeUserCounts.length,
                total_users: this.adminRealm.objects("User").length,
                server_version: this.config.serverVersion,
                os_type: os.type(),
                os_platform: os.platform(),
                os_release: os.release()
            };
            yield shared_1.mixpanel.track('ros_usage', payload).catch((err) => {
            });
        });
    }
}
__decorate([
    decorators_1.Start(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", [Server_1.Server]),
    __metadata("design:returntype", Promise)
], MixpanelService.prototype, "start", null);
__decorate([
    decorators_1.Stop(),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", Promise)
], MixpanelService.prototype, "stop", null);
exports.MixpanelService = MixpanelService;
//# sourceMappingURL=MixpanelService.js.map